
group "ch.unibas.dmi.dbis.chronos"
description = "Chronos Demo Agent"


def versionMajor = 1
def versionMinor = 1
def versionQualifier = "-SNAPSHOT"
version = versionMajor + "." + versionMinor + versionQualifier


buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // Shadowing; used to make a fat jar (https://github.com/johnrengelman/shadow)
        classpath group: "com.github.jengelman.gradle.plugins", name: "shadow", version: "6.1.0"
        // Lombok (https://plugins.gradle.org/plugin/io.freefair.lombok)
        classpath group: "io.freefair.gradle", name: "lombok-plugin", version: "6.2.0"
    }
}


repositories {
    mavenCentral()
}


apply plugin: "application"
apply plugin: "idea"
apply plugin: "java-library"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "io.freefair.lombok"


compileJava.options.encoding = "UTF-8"
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


mainClassName = "ch.unibas.dmi.dbis.chronos.demoagent.App"


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}


dependencies {
    implementation group: 'org.chronos-eaas', name: 'chronos-agent', version: '2.3.3'
    implementation group: 'commons-io', name: 'commons-io', version: '2.5'
    implementation group: 'com.github.rvesse', name: 'airline', version: '2.7.2'
}


jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Chronos Project (chronos-eaas.org)"
        attributes "Group": project.group
        attributes "Name": project.name
        attributes "Version": project.version
        attributes "Main-Class": mainClassName
    }
}

shadowJar {
    classifier = null
}

assemble.dependsOn shadowJar

artifacts {
//    archives jar
    archives shadowJar
}


javadoc {
    failOnError = false
}


idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes/main")
        testOutputDir = file("${project.buildDir}/classes/test")
    }
}